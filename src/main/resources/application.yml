server:
  port: 5000

# ===============================
# = SPRING
# ===============================
spring:
  # ===============================
  # = DATA SOURCE
  # ===============================
  datasource:
    url: jdbc:postgresql://${SATURDAY_HOST}:${SATURDAY_PORT}/${SATURDAY_DB_NAME}
    username: ${SATURDAY_USERNAME}
    password: ${SATURDAY_PASSWORD}
    hikari:
      data-source-properties: stringtype=unspecified
      connection-test-query: SELECT 1;
  # ==============================================================
  # = JPA for PostgreSQL
  # ==============================================================
  jpa:
    properties:
      hibernate:
        temp:
          use_jdbc_metadata_defaults: false
    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
  # ==============================================================
  # = Spring Java Mail Sender for EmailSenderConfig
  # ==============================================================
  mail:
    host: ${AWS_SES_SMPT_SERVER}
    username: ${AWS_SES_SMPT_USER}
    password: ${AWS_SES_SMPT_PASSWORD}
    properties:
      mail:
        transport:
          protocol: smtp
        smtp:
          port: ${AWS_SES_SMPT_PORT}
          auth: true
          starttls:
            enable: true
            required: true
  # ==============================================================
  # = TODO Probably don't need this anymore
  # ==============================================================
  mvc:
    dispatch-options-request: true
  # ==============================================================
  # Handle big files
  # ==============================================================
  servlet:
    multipart:
      maxFileSize: 100MB
      maxRequestSize: 100MB
  # ==============================================================
  # = Spring Security / Queries for AuthenticationManagerBuilder
  # ==============================================================
  queries:
    users-query: select email, password_hash, is_email_confirmed from entities where email=?
    roles-query: select e.email, r.label from entities e inner join entity_roles er on(e.id=er.entity_id) inner join roles r on(er.role_id=r.id) where e.email=?
  # ==============================================================
  # = Spring Social Facebook for SocialConfig
  # ==============================================================
  social:
    facebook:
      app-id: ${SATURDAY_FACEBOOK_APP_ID}
      app-secret: ${SATURDAY_FACEBOOK_APP_SECRET}

# ===============================
# = SPECIFIC TO THIS APP
# ===============================
saturday:
  # Date and time formatting
  timestamp:
    format: "yyyy-MM-dd HH:mm:ss"
  date:
    format: "yyyy-MM-dd"

  # OneSignal configuration
  one-signal:
    app.id: ${ONESIGNAL_APP_ID}
    rest:
      api:
        url: "https://onesignal.com/api/v1/notifications"
        key: ${ONESIGNAL_REST_API_KEY}

  # AWS service configurations
  client-url: ${SATURDAY_CLIENT_URL}
  ses:
    from-email: ${AWS_SES_FROM_EMAIL}
  s3:
    region: us-east-1
    url:
      prefix: "https://s3.amazonaws.com/"
    user-files-bucket: mom-diary-user-files
    topic:
      content:
        key:
          prefix: "topic-content/"
    entity:
      profile_picture:
        key:
          prefix: "profile-pictures/"

  # DB foreign key constants
  access-token-type:
    email-confirmation: 1
    reset-password: 2
    bearer-token: 3

  # DB foreign key constants and column restrictions
  password-min-length: 8
  page-size-limit: 99
  topic:
    name:
      max_length: 20
    description:
      max_length: 150
    permission:
       can_post: 1
       can_invite: 2
    role:
      user: 1
      admin: 2
    invite:
      status:
        pending: 1
        rejected: 2
        accepted: 3
        rescinded: 4
        left_topic: 5
